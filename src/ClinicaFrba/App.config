<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
  </startup>
  <appSettings>
    <add key="fechaActualSistema" value="2016/11/07" />
    <add key="valor.paginacion" value="10" />
    <add key="max.horas.semanales.profesional" value="48" />
    <add key="tiempo.entre.turnos.minutos" value="30" />
    <add key="query.obtener.funcionalidades.rol" value="SELECT rfu_fun_id FROM PICO_Y_PALA.rol_funcionalidad JOIN PICO_Y_PALA.rol ON rfu_rol_id=rol_id WHERE rol_habilitado=1 AND rol_nombre='{rolUsuario}'" />
    <add key="query.abm.rol.select" value="SELECT rol_id ID, rol_nombre Nombre, CASE rol_habilitado
                                                                                WHEN 1 THEN 'Sí'
                                                                                ELSE 'No'
                                                                                END Habilitado
                                           FROM PICO_Y_PALA.rol" />
    <add key="query.abm.rol.where.nombre" value=" rol_nombre LIKE '%{0}%'" />
    <add key="query.abm.rol.where.habilitado" value=" rol_habilitado = {0}" />
    <add key="query.abm.rol.order" value=" ORDER BY rol_id" />
    <add key="query.abm.rol.funcionalidades" value="SELECT fun_desc FROM PICO_Y_PALA.funcionalidad 
                                                    JOIN PICO_Y_PALA.rol_funcionalidad ON rfu_fun_id = fun_id AND fun_id &lt;&gt; 1
                                                    JOIN PICO_Y_PALA.rol ON rfu_rol_id = rol_id AND rol_nombre = '{0}'" />

    <add key="query.obtener.profesionales.select" value="SELECT u.usu_apellido Apellido,u.usu_nombre Nombre,u.usu_tipo_doc 'Tipo Documento',u.usu_nro_doc 'Nro Documento',p.pro_matricula 'Matrícula'
                                                          FROM pico_y_pala.usuario u
                                                          INNER JOIN pico_y_pala.profesional p ON p.pro_nro_doc = u.usu_nro_doc
                                                          INNER JOIN pico_y_pala.profesional_especialidad pe ON pe.pes_pro_nro_doc = p.pro_nro_doc
                                                          INNER JOIN pico_y_pala.especialidad e ON e.esp_id = pe.pes_esp_id" />
    <add key="query.obtener.profesionales.count" value="SELECT COUNT(DISTINCT u.usu_nro_doc) total_profesionales
                                                        FROM pico_y_pala.usuario u
                                                        INNER JOIN pico_y_pala.profesional p ON p.pro_nro_doc = u.usu_nro_doc
                                                        INNER JOIN pico_y_pala.profesional_especialidad pe ON pe.pes_pro_nro_doc = p.pro_nro_doc
                                                        INNER JOIN pico_y_pala.especialidad e ON e.esp_id = pe.pes_esp_id" />
    <add key="query.obtener.profesionales.where.apellido" value=" u.usu_apellido like '%{0}%'" />
    <add key="query.obtener.profesionales.where.nombre" value=" u.usu_nombre like '%{1}%'" />
    <add key="query.obtener.profesionales.where.nro.doc" value=" u.usu_nro_doc = '{2}'" />
    <add key="query.obtener.profesionales.where.matricula" value=" p.pro_matricula = '{3}'" />
    <add key="query.obtener.profesionales.where.especialidad" value=" e.esp_desc like '%{4}%'" />
    <add key="query.obtener.profesionales.group.by" value=" GROUP BY u.usu_nro_doc, u.usu_apellido, u.usu_nombre, u.usu_tipo_doc, u.usu_nro_doc,p.pro_matricula" />
    <add key="query.obtener.especialidades.profesional.select" value="SELECT e.esp_id ID, e.esp_desc Especialidad
                                                                      FROM pico_y_pala.usuario u
                                                                      INNER JOIN pico_y_pala.profesional p ON p.pro_nro_doc = u.usu_nro_doc
                                                                      INNER JOIN pico_y_pala.profesional_especialidad pe ON pe.pes_pro_nro_doc = p.pro_nro_doc
                                                                      INNER JOIN pico_y_pala.especialidad e ON e.esp_id = pe.pes_esp_id" />
    <add key="query.obtener.agendas.select" value="SELECT da.dpa_pro_nro_doc nro_doc,e.esp_id esp_id,e.esp_desc especialidad,d.dia_id dia_id, d.dia_nombre dia,
						                                              da.dpa_desde desde,da.dpa_hasta hasta, da.dpa_fecha_desde fechaDesde, da.dpa_fecha_hasta fechaHasta
					                                          FROM pico_y_pala.agenda a
					                                          INNER JOIN pico_y_pala.dia_por_agenda da ON da.dpa_esp_id = a.age_esp_id AND da.dpa_pro_nro_doc = a.age_pro_nro_doc AND da.dpa_dia != 1
					                                          INNER JOIN pico_y_pala.dia d ON da.dpa_dia = d.dia_id
					                                          INNER JOIN pico_y_pala.especialidad e ON e.esp_id = a.age_esp_id" />
    <add key="query.obtener.agendas.group.by"	value=" GROUP BY da.dpa_pro_nro_doc,e.esp_id,e.esp_desc,d.dia_id,d.dia_nombre,da.dpa_desde,da.dpa_hasta,da.dpa_fecha_desde,da.dpa_fecha_hasta" />
    <add key="query.obtener.agendas.having.profesional" value=" da.dpa_pro_nro_doc={0}" />
    <add key="query.obtener.agendas.having.dia" value=" d.dia_id={1}" />
    <add key="query.obtener.agendas.having.horario" value=" {2} &lt; da.dpa_desde AND {3} &lt;= da.dpa_desde OR {2} &gt;= da.dpa_hasta AND {3} > da.dpa_hasta" />
    <add key="query.obtener.agendas.having.horario.conflicto" value=" NOT(CONVERT(Date, {6}, 111) &lt; da.dpa_fecha_desde AND CONVERT(Date, {7}, 111) &lt; da.dpa_fecha_desde OR CONVERT(Date, {6}, 111) &gt; da.dpa_fecha_hasta AND CONVERT(Date, {7}, 111) &gt; da.dpa_fecha_hasta ) AND
                                                                      NOT({4} &lt; da.dpa_desde AND {5} &lt;= da.dpa_desde OR {4} &gt;= da.dpa_hasta AND {5} &gt; da.dpa_hasta)" />
    <add key="query.obtener.agendas.having.especialidad" value=" e.esp_id={8}" />
    <add key="query.obtener.agendas.having.dia.not.domingo" value=" d.dia_id &lt;&gt; 1" />
    <add key="query.abm.afiliado.select" value="select usu.usu_username Usuario, usu.usu_apellido Apellido, usu.usu_nombre Nombre,afi.afi_nro_doc Documento,afi_nro_afiliado 'Nro Afiliado',usu.usu_direccion Direccion, usu.usu_telefono Telefono, usu.usu_mail Mail, usu.usu_fecha_nac 'Fecha de Nacimiento', eci.eci_desc 'Estado Civil', pla.pla_desc 'Plan', afi.afi_nro_consulta 'Nro Consulta', CASE afi.afi_activo
																																																																					                                                                                                                                                                                                                                                             WHEN 1 THEN 'SI'
																																																																					                                                                                                                                                                                                                                                             ELSE 'NO'
																																																																					                                                                                                                                                                                                                                                             END Activo 
                                                from pico_y_pala.afiliado afi, pico_y_pala.estado_civil eci, pico_y_pala.planes pla, pico_y_pala.usuario usu where afi.afi_eci_id=eci.eci_id and pla.pla_codigo=afi.afi_pla_codigo and afi.afi_nro_doc= usu.usu_nro_doc" />
    <add key="query.abm.afiliado.count" value="select count(*) Total from pico_y_pala.afiliado afi, pico_y_pala.estado_civil eci, pico_y_pala.planes pla, pico_y_pala.usuario usu where afi.afi_eci_id=eci.eci_id and pla.pla_codigo=afi.afi_pla_codigo and afi.afi_nro_doc= usu.usu_nro_doc" />
    <add key="query.abm.afiliado.and.nombre" value=" AND usu.usu_nombre LIKE '%{0}%'" />
    <add key="query.abm.afiliado.and.apellido" value=" AND usu.usu_apellido LIKE '%{0}%'" />
    <add key="query.abm.afiliado.and.username" value=" AND usu.usu_username LIKE '%{0}%'" />
    <add key="query.abm.afiliado.and.documento" value=" AND afi.afi_nro_doc={0}" />
    <add key="query.abm.afiliado.and.nroAfilado" value=" AND afi_nro_afiliado={0}" />
    <add key="query.abm.afiliado.and.activo" value=" AND afi.afi_activo = {0}" />
    <add key="query.abm.afiliado.order" value=" ORDER BY afi.afi_nro_doc" />
    <add key="query.obtener.dias.select" value=" SELECT d.dia_nombre DIA FROM pico_y_pala.dia d" />
    <add key="query.obtener.turnos.select" value="SELECT tur_id,tur_afi_nro_doc, tur_pro_nro_doc, tur_esp_id, tur_fecha_hora
                                                  FROM pico_y_pala.turno t" />
    <add key="query.obtener.turnos.select.grilla" value="SELECT tur_id 'Nro Turno',u.usu_apellido + ', ' + u.usu_nombre 'Profesional', e.esp_desc 'Especialidad', t.tur_fecha_hora 'Fecha Turno'
                                                          FROM pico_y_pala.turno t
                                                          INNER JOIN pico_y_pala.afiliado a ON a.afi_nro_doc=t.tur_afi_nro_doc
                                                          INNER JOIN pico_y_pala.profesional p ON p.pro_nro_doc=t.tur_pro_nro_doc
                                                          INNER JOIN pico_y_pala.usuario u ON u.usu_nro_doc=p.pro_nro_doc
                                                          INNER JOIN pico_y_pala.especialidad e ON e.esp_id=t.tur_esp_id" />
    <add key="query.obtener.turnos.count.grilla" value="SELECT COUNT(1) 'Cantidad Turnos'
                                                          FROM pico_y_pala.turno t
                                                          INNER JOIN pico_y_pala.afiliado a ON a.afi_nro_doc=t.tur_afi_nro_doc
                                                          INNER JOIN pico_y_pala.profesional p ON p.pro_nro_doc=t.tur_pro_nro_doc
                                                          INNER JOIN pico_y_pala.usuario u ON u.usu_nro_doc=p.pro_nro_doc
                                                          INNER JOIN pico_y_pala.especialidad e ON e.esp_id=t.tur_esp_id" />
    <add key="query.obtener.turnos.where.profesional" value=" t.tur_pro_nro_doc = {0}" />
    <add key="query.obtener.turnos.where.profesional.nombre" value=" u.usu_nombre LIKE '%{0}%'" />
    <add key="query.obtener.turnos.where.profesional.apellido" value=" u.usu_apellido LIKE '%{1}%'" />
    <add key="query.obtener.turnos.where.especialidad.descripcion" value=" e.esp_desc LIKE '%{0}%'" />
    <add key="query.obtener.turnos.where.afiliado" value=" t.tur_afi_nro_doc = {1}" />
    <add key="query.obtener.turnos.where.not.cancelacion" value=" not exists(select 1 from pico_y_pala.cancelacion c where c.can_tur_id = t.tur_id)" />
    <add key="query.obtener.turnos.where.especialidad" value=" t.tur_esp_id={2}" />
    <add key="query.obtener.turnos.where.fecha.mayor.igual" value=" CONVERT(Date,t.tur_fecha_hora) >= CONVERT(Date,{3})" />
    <add key="query.obtener.turnos.where.fecha.mayor" value=" CONVERT(Date,t.tur_fecha_hora) > CONVERT(Date,{3})" />
    <add key="query.obtener.turnos.where.fecha" value=" CONVERT(Date,t.tur_fecha_hora) = CONVERT(Date,{3})" />
    <add key="query.obtener.turnos.select.not.consultas" value="SELECT t.tur_id 'Id Turno', u.usu_apellido Apellido,u.usu_nombre Nombre,p.pro_matricula 'Matrícula', t.tur_fecha_hora 'Fecha Turno', u2.usu_apellido +', '+u2.usu_nombre 'Paciente', afi.afi_nro_afiliado 'ID Afiliado'                                                          FROM pico_y_pala.usuario u
                                                                INNER JOIN pico_y_pala.profesional p ON p.pro_nro_doc = u.usu_nro_doc
														                                    INNER JOIN pico_y_pala.turno t on t.tur_pro_nro_doc = p.pro_nro_doc
														                                    INNER JOIN pico_y_pala.afiliado afi on t.tur_afi_nro_doc = afi.afi_nro_doc
														                                    INNER JOIN pico_y_pala.usuario u2 on u2.usu_nro_doc = afi.afi_nro_doc
                                                                WHERE YEAR(t.tur_fecha_hora)={2} and MONTH(t.tur_fecha_hora)={3} AND DAY(t.tur_fecha_hora)={4} AND NOT EXISTS (select * from pico_y_pala.consulta con where con.con_tur_id = t.tur_id)" />
    <add key="query.obtener.turnos.count.not.consultas" value="SELECT count(*) total_turnos FROM pico_y_pala.usuario u
                                                                INNER JOIN pico_y_pala.profesional p ON p.pro_nro_doc = u.usu_nro_doc
														                                    INNER JOIN pico_y_pala.turno t on t.tur_pro_nro_doc = p.pro_nro_doc
														                                    INNER JOIN pico_y_pala.afiliado afi on t.tur_afi_nro_doc = afi.afi_nro_doc
														                                    INNER JOIN pico_y_pala.usuario u2 on u2.usu_nro_doc = afi.afi_nro_doc
                                                                WHERE YEAR(t.tur_fecha_hora)={2} and MONTH(t.tur_fecha_hora)={3} AND DAY(t.tur_fecha_hora)={4} AND NOT EXISTS (select * from pico_y_pala.consulta con where con.con_tur_id = t.tur_id)" />
    <add key="query.obtener.turnos.profesionales.and" value=" AND u.usu_nro_doc={1}" />
    <add key="query.obtener.turnos.afiliado.and" value=" AND afi.afi_nro_afiliado={5}" />
    <add key="query.obtener.bonos.disponinbles.select" value="select bon.bon_id 'Id Bonos Disponibles', bon.bon_afiliado_compra 'Afiliado Compro' from pico_y_pala.bono bon inner join pico_y_pala.afiliado afi on bon.bon_afiliado_compra = afi.afi_nro_doc inner join pico_y_pala.gf_afiliado gfa on afi.afi_nro_doc = gfa.agf_afi_nro_doc where bon.bon_afiliado_utilizo is null and gfa.agf_gpo_id={1} and bon.bon_pla_id={2}" />
    <add key="query.obtener.bonos.disponinbles.count" value="select count(*) total_bonos from pico_y_pala.bono bon inner join pico_y_pala.afiliado afi on bon.bon_afiliado_compra = afi.afi_nro_doc inner join pico_y_pala.gf_afiliado gfa on afi.afi_nro_doc = gfa.agf_afi_nro_doc where bon.bon_afiliado_utilizo is null and gfa.agf_gpo_id={1} and bon.bon_pla_id={2}" />
    <add key="query.obtener.consulta.select" value="select con.con_id 'ID Consulta', afi.afi_nro_afiliado 'Nro Paciente', usu.usu_apellido + ', ' + usu.usu_nombre 'Paciente', con.con_fecha_llegada 'Hora llegada Paciente' from pico_y_pala.consulta con 
                                                    join pico_y_pala.turno tur on con_tur_id=tur.tur_id 
                                                    join pico_y_pala.afiliado afi on tur.tur_afi_nro_doc=afi.afi_nro_doc 
                                                    join pico_y_pala.usuario usu on afi.afi_nro_doc=usu.usu_nro_doc
                                                    where not exists (select * from pico_y_pala.cancelacion can where can_tur_id=tur.tur_id)
                                                    AND con.con_fecha_llegada is not null AND con.con_atendio is null AND tur.tur_pro_nro_doc={1} AND YEAR(tur.tur_fecha_hora)={2} AND MONTH(tur.tur_fecha_hora)={3} AND DAY(tur.tur_fecha_hora)={4}" />
    <add key="query.obtener.consulta.count" value="select count(*) total_consultas from pico_y_pala.consulta con 
                                                    join pico_y_pala.turno tur on con_tur_id=tur.tur_id 
                                                    join pico_y_pala.afiliado afi on tur.tur_afi_nro_doc=afi.afi_nro_doc 
                                                    join pico_y_pala.usuario usu on afi.afi_nro_doc=usu.usu_nro_doc
                                                    where not exists (select * from pico_y_pala.cancelacion can where can_tur_id=tur.tur_id)
                                                    AND con.con_fecha_llegada is not null AND con.con_atendio is null AND tur.tur_pro_nro_doc={1} AND YEAR(tur.tur_fecha_hora)={2} AND MONTH(tur.tur_fecha_hora)={3} AND DAY(tur.tur_fecha_hora)={4}" />

    <add key="query.obtener.cancelaciones.select" value="SELECT can_id, can_tca_id, can_motivo, can_tur_id, can_pro_nro_doc, can_fecha_desde,can_fecha_hasta
                                                          FROM pico_y_pala.cancelacion" />
    <add key="query.obtener.cancelaciones.where.profesional" value=" can_pro_nro_doc={0}" />
    <add key="query.obtener.cancelaciones.where.fecha.mayor.igual" value=" CONVERT(Date, can_fecha_desde) >= {fechaActual}" />

    <add key="query.obtener.listado.1.select" value="select top 5(select usu.usu_apellido + ', ' + usu.usu_nombre from pico_y_pala.usuario usu where usu.usu_nro_doc = pro.pro_nro_doc) Profesional, esp.esp_desc Especialidad, convert(numeric(18,1),sum(DATEDIFF(MINUTE,tur.tur_fecha_hora,con.con_fecha_consulta)))/60 as 'Horas Atendidas' 
                                                     from pico_y_pala.profesional pro join pico_y_pala.turno tur on tur.tur_pro_nro_doc=pro.pro_nro_doc join pico_y_pala.consulta con on con.con_tur_id=tur.tur_id join pico_y_pala.especialidad esp on tur.tur_esp_id = esp.esp_id 
                                                     where not exists(select * from pico_y_pala.cancelacion can where can.can_tur_id=tur.tur_id) and con.con_atendio=1 " />
    <add key="query.obtener.listado.1.año" value="and YEAR(con.con_fecha_consulta)={1} " />
    <add key="query.obtener.listado.1.PrimerSemestre" value="and MONTH(con.con_fecha_consulta) between 1 and 6 " />
    <add key="query.obtener.listado.1.SegundoSemestre" value="and MONTH(con.con_fecha_consulta) between 7 and 12 " />
    <add key="query.obtener.listado.1.meses" value="and MONTH(con.con_fecha_consulta)={2} " />
    <add key="query.obtener.listado.1.group.order" value="group by pro.pro_nro_doc, esp.esp_id, esp.esp_desc order by 'Horas Atendidas', pro.pro_nro_doc" />
    <add key="query.obtener.listado.2.select" value="select top 5 esp.esp_desc 'Especialidad',count (con.con_bono_utilizado) 'Cantidad Bonos Utilizados' from pico_y_pala.especialidad esp
                                                      inner join pico_y_pala.turno tur on tur.tur_esp_id = esp.esp_id inner join pico_y_pala.consulta con on con.con_tur_id = tur.tur_id
                                                      where not exists(select * from pico_y_pala.cancelacion can where can.can_tur_id=tur.tur_id) and con.con_atendio=1 " />
    <add key="query.obtener.listado.2.group.order" value="group by esp.esp_desc order by count (con.con_bono_utilizado) desc" />
    <add key="query.obtener.listado.3.select" value="select top 5 esp.esp_desc, CASE WHEN (not exists({4})) THEN 0 ELSE ({5}) END as 'Turnos Cancelados' from pico_y_pala.turno tur
                                                      join pico_y_pala.especialidad esp on tur.tur_esp_id=esp.esp_id where YEAR(tur.tur_fecha_hora)={1} " />
    <add key="query.obtener.listado.3.subquery.select" value="select * from pico_y_pala.cancelacion can join pico_y_pala.turno tur2 on can.can_tur_id=tur2.tur_id join pico_y_pala.tipo_cancelacion tcan on can.can_tca_id=tcan.tca_id where tur2.tur_esp_id=esp.esp_id and year(tur2.tur_fecha_hora)={1} " />
    <add key="query.obtener.listado.3.subquery.count" value="select count(*) from pico_y_pala.cancelacion can join pico_y_pala.turno tur2 on can.can_tur_id=tur2.tur_id join pico_y_pala.tipo_cancelacion tcan on can.can_tca_id=tcan.tca_id where tur2.tur_esp_id=esp.esp_id and year(tur2.tur_fecha_hora)={1} " />
    <add key="query.obtener.listado.3.PrimerSemestre" value="and MONTH(tur.tur_fecha_hora) between 1 and 6 " />
    <add key="query.obtener.listado.3.SegundoSemestre" value="and MONTH(tur.tur_fecha_hora) between 7 and 12 " />
    <add key="query.obtener.listado.3.meses" value="and MONTH(tur.tur_fecha_hora)={2} " />
    <add key="query.obtener.listado.3.PrimerSemestre.subquery" value="and MONTH(tur2.tur_fecha_hora) between 1 and 6 " />
    <add key="query.obtener.listado.3.SegundoSemestre.subquery" value="and MONTH(tur2.tur_fecha_hora) between 7 and 12 " />
    <add key="query.obtener.listado.3.meses.subquery" value="and MONTH(tur2.tur_fecha_hora)={2} " />
    <add key="query.obtener.listado.3.tipoCancelacion.subquery" value="and can.can_tca_id={6} " />
    <add key="query.obtener.listado.3.group.order" value="group by esp.esp_id, esp.esp_desc order by 'Turnos Cancelados' desc, esp.esp_desc " />
    <add key="query.obtener.listado.4.select" value="select top 5 afi_nro_doc 'Documento',usu.usu_apellido + ', ' + usu.usu_nombre 'Nombre Afiliado',count (*) 'Cantidad de Bonos Comprados', case when (select count (*) from pico_y_pala.gf_afiliado gfaux where gfaux.agf_gpo_id = gf.gpo_id) >1 then 'Tiene grupo familiar' else 'No tiene grupo familiar'end 'Tiene Grupo Familiar?' from pico_y_pala.afiliado afi 
                                                     inner join pico_y_pala.usuario usu on afi.afi_nro_doc = usu_nro_doc inner join pico_y_pala.gf_afiliado gfa on gfa.agf_afi_nro_doc = afi.afi_nro_doc inner join pico_y_pala.grupo_familiar gf on gf.gpo_id = gfa.agf_gpo_id inner join pico_y_pala.bono bono on afi.afi_nro_doc = bono.bon_afiliado_compra inner join pico_y_pala.compra compra on bono.bon_com_id = compra.com_id " />
    <add key="query.obtener.listado.4.año" value="where YEAR(compra.com_fecha)={1} " />
    <add key="query.obtener.listado.4.PrimerSemestre" value="and MONTH(compra.com_fecha) between 1 and 6 " />
    <add key="query.obtener.listado.4.SegundoSemestre" value="and MONTH(compra.com_fecha) between 7 and 12 " />
    <add key="query.obtener.listado.4.meses" value="and MONTH(compra.com_fecha)={2} " />
    <add key="query.obtener.listado.4.group.order" value="group by afi_nro_doc, usu.usu_apellido + ', ' + usu.usu_nombre ,gf.gpo_id order by count (*) desc" />
    <add key="query.obtener.listado.5.select" value="select top 5 usu.usu_apellido +', '+usu.usu_nombre 'Profesional',pro.pro_nro_doc 'Documento',(select pla_desc from pico_y_pala.planes pla where pla.pla_codigo = afi.afi_pla_codigo) 'Plan',esp.esp_desc 'Especialidad',count(*) 'Cantidad de Consultas'  from pico_y_pala.profesional pro
                                                     join pico_y_pala.turno tur on tur.tur_pro_nro_doc=pro.pro_nro_doc join pico_y_pala.consulta con on con.con_tur_id=tur.tur_id join pico_y_pala.especialidad esp on tur.tur_esp_id = esp.esp_id join pico_y_pala.usuario usu on pro.pro_nro_doc=usu.usu_nro_doc join pico_y_pala.afiliado afi on tur.tur_afi_nro_doc=afi.afi_nro_doc where not exists(select * from pico_y_pala.cancelacion can where can.can_tur_id=tur.tur_id) and con.con_atendio=1 " />
    <add key="query.obtener.listado.5.plan" value="and afi.afi_pla_codigo={3} " />
    <add key="query.obtener.listado.5.group.order" value="group by pro.pro_nro_doc,usu.usu_apellido +', '+usu.usu_nombre ,afi.afi_pla_codigo, esp.esp_id, esp.esp_desc order by 'Cantidad de Consultas' desc" />

  </appSettings>
  <connectionStrings>
    <clear />
    <add name="ClinicaGD2C2016" connectionString="Data Source=localhost\SQLSERVER2012;Initial Catalog=GD2C2016;User ID=gd;Password=gd2016;MultipleActiveResultSets=true"
      providerName="System.Data.ProviderName" />
  </connectionStrings>
</configuration>